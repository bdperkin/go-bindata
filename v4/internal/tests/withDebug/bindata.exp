// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../testdata/in/a/test.asset
// ../../../testdata/in/b/test.asset
// ../../../testdata/in/c/test.asset
// ../../../testdata/in/file name
// ../../../testdata/in/test.asset

package bindata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataInATestAsset reads file data from disk. It returns an error on failure.
func bindataInATestAssetBytes() ([]byte, error) {
	asset, err := bindataInATestAsset()
	if asset == nil {
		return nil, err
	}
	return asset.bytes, err
}

func bindataInATestAsset() (*asset, error) {
	path := "PATH_PREFIX_PLACEHOLDER/testdata/in/a/test.asset"
	name := "in/a/test.asset"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataInBTestAsset reads file data from disk. It returns an error on failure.
func bindataInBTestAssetBytes() ([]byte, error) {
	asset, err := bindataInBTestAsset()
	if asset == nil {
		return nil, err
	}
	return asset.bytes, err
}

func bindataInBTestAsset() (*asset, error) {
	path := "PATH_PREFIX_PLACEHOLDER/testdata/in/b/test.asset"
	name := "in/b/test.asset"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataInCTestAsset reads file data from disk. It returns an error on failure.
func bindataInCTestAssetBytes() ([]byte, error) {
	asset, err := bindataInCTestAsset()
	if asset == nil {
		return nil, err
	}
	return asset.bytes, err
}

func bindataInCTestAsset() (*asset, error) {
	path := "PATH_PREFIX_PLACEHOLDER/testdata/in/c/test.asset"
	name := "in/c/test.asset"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataInFilename reads file data from disk. It returns an error on failure.
func bindataInFilenameBytes() ([]byte, error) {
	asset, err := bindataInFilename()
	if asset == nil {
		return nil, err
	}
	return asset.bytes, err
}

func bindataInFilename() (*asset, error) {
	path := "PATH_PREFIX_PLACEHOLDER/testdata/in/file name"
	name := "in/file name"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataInTestAsset reads file data from disk. It returns an error on failure.
func bindataInTestAssetBytes() ([]byte, error) {
	asset, err := bindataInTestAsset()
	if asset == nil {
		return nil, err
	}
	return asset.bytes, err
}

func bindataInTestAsset() (*asset, error) {
	path := "PATH_PREFIX_PLACEHOLDER/testdata/in/test.asset"
	name := "in/test.asset"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"in/a/test.asset": bindataInATestAsset,
	"in/b/test.asset": bindataInBTestAsset,
	"in/c/test.asset": bindataInCTestAsset,
	"in/file name":    bindataInFilename,
	"in/test.asset":   bindataInTestAsset,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"in": {Func: nil, Children: map[string]*bintree{
		"a": {Func: nil, Children: map[string]*bintree{
			"test.asset": {Func: bindataInATestAsset, Children: map[string]*bintree{}},
		}},
		"b": {Func: nil, Children: map[string]*bintree{
			"test.asset": {Func: bindataInBTestAsset, Children: map[string]*bintree{}},
		}},
		"c": {Func: nil, Children: map[string]*bintree{
			"test.asset": {Func: bindataInCTestAsset, Children: map[string]*bintree{}},
		}},
		"file name": {Func: bindataInFilename, Children: map[string]*bintree{}},
		"test.asset": {Func: bindataInTestAsset, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
